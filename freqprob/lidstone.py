"""
Lidstone family probability scoring methods.

This module implements the Lidstone family of smoothing methods including
Lidstone, Laplace, and Expected Likelihood Estimation (ELE).
"""

import math
from dataclasses import dataclass
from typing import Dict, Optional

from .base import ScoringMethod, ScoringMethodConfig


@dataclass
class LidstoneConfig(ScoringMethodConfig):
    """Configuration for Lidstone distribution."""
    
    gamma: float = 1.0
    bins: Optional[int] = None
    logprob: bool = True


@dataclass
class LaplaceConfig(ScoringMethodConfig):
    """Configuration for Laplace distribution."""
    
    bins: Optional[int] = None
    logprob: bool = True


@dataclass
class ELEConfig(ScoringMethodConfig):
    """Configuration for ELE distribution."""
    
    bins: Optional[int] = None
    logprob: bool = True


class Lidstone(ScoringMethod):
    """
    Returns a Lidstone estimate log-probability distribution.

    In a Lidstone estimate log-probability the frequency distribution of
    observed samples is used to estimate the probability distribution of the
    experiment that generated such observation, following a parameter given by
    a real number *gamma* typically randing from 0.0 to 1.0. The Lidstone
    estimate approximates the probability of a sample with count *c* from an
    experiment with *N* outcomes and *B* bins as *(c+gamma)/(N+B*gamma)*. This
    is equivalent to adding *gamma* to the count of each bin and taking the
    Maximum-Likelihood estimate of the resulting frequency distribution, with
    the corrected space of observation; the probability for an unobserved
    sample is given by frequency of a sample with gamma observations.
    Also called "additive smoothing", this estimation method is frequently
    used with a *gamma* of 1.0 (the so-called "Laplace smoothing") or of 0.5
    (the so-called "Expected likelihood estimate", or ELE).

    Parameters
    ----------
    freqdist : dict
        Frequency distribution of samples (keys) and counts (values) from
        which the probability distribution will be calculated.
    gamma : float
        A real number used to parameterize the estimate.
    bins: int
        The optional number of sample bins that can be generated by the
        experiment that is described by the probability distribution. If not
        specified, it will default to the number of samples in the frequency
        distribution.
    logprob : bool
        Whether to return the log-probabilities (default) or the
        probabilities themselves. When using the log-probabilities, the
        counts are automatically corrected to avoid domain errors.
    """
    
    __slots__ = ()
    
    def __init__(self, freqdist: Dict[str, int], gamma: float, bins: Optional[int] = None, logprob: bool = True):
        # Collect `bins` if necessary before validating with the parent
        if bins is None:
            bins = len(freqdist)
        
        config = LidstoneConfig(gamma=gamma, bins=bins, logprob=logprob)
        super().__init__(config)
        self.name = "Lidstone"
        self.fit(freqdist)
    
    def _compute_probabilities(self, freqdist: Dict[str, int]) -> None:
        """Compute Lidstone probabilities."""
        gamma = self.config.gamma
        bins = self.config.bins
        
        # Store the probabilities
        n = sum(freqdist.values())
        if self.logprob:
            self._prob = {sample: math.log((count + gamma) / (n + bins * gamma)) for sample, count in freqdist.items()}
            self._unobs = math.log(gamma / (n + bins * gamma))
        else:
            self._prob = {sample: (count + gamma) / (n + bins * gamma) for sample, count in freqdist.items()}
            self._unobs = gamma / (n + bins * gamma)


class Laplace(Lidstone):
    """
    Returns a Laplace estimate probability distribution.

    In a Laplace estimate log-probability the frequency distribution of
    observed samples is used to estimate the probability distribution of the
    experiment that generated such observation, following a parameter given by
    a real number *gamma* set by definition to 1. As such, it is a
    generalization of the Lidstone estimate.

    Parameters
    ----------
    freqdist : dict
        Frequency distribution of samples (keys) and counts (values) from
        which the probability distribution will be calculated.
    bins: int
        The optional number of sample bins that can be generated by the
        experiment that is described by the probability distribution. If
        not specified, it will default to the number of samples in
        the frequency distribution.
    logprob : bool
        Whether to return the log-probabilities (default) or the
        probabilities themselves. When using the log-probabilities, the
        counts are automatically corrected to avoid domain errors.
    """
    
    __slots__ = ()
    
    def __init__(self, freqdist: Dict[str, int], bins: Optional[int] = None, logprob: bool = True):
        # Call the parent constructor
        super().__init__(freqdist, gamma=1.0, bins=bins, logprob=logprob)
        self.name = "Laplace"


class ELE(Lidstone):
    """
    Returns a Expected-Likelihood estimate probability distribution.

    In an Expected-Likelihood estimate log-probability the frequency
    distribution of observed samples is used to estimate the probability
    distribution of the experiment that generated such observation, following a
    parameter given by a real number *gamma* set by definition to 0.5. As such,
    it is a generalization of the Lidstone estimate.

    Parameters
    ----------
    freqdist : dict
        Frequency distribution of samples (keys) and counts (values) from
        which the probability distribution will be calculated.
    bins: int
        The optional number of sample bins that can be generated by the
        experiment that is described by the probability distribution. If
        not specified, it will default to the number of samples in
        the frequency distribution.
    logprob : bool
        Whether to return the log-probabilities (default) or the
        probabilities themselves. When using the log-probabilities, the
        counts are automatically corrected to avoid domain errors.
    """
    
    __slots__ = ()
    
    def __init__(self, freqdist: Dict[str, int], bins: Optional[int] = None, logprob: bool = True):
        # Call the parent constructor
        super().__init__(freqdist, gamma=0.5, bins=bins, logprob=logprob)
        self.name = "ELE"