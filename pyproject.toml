[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "freqprob"
dynamic = ["version"]
description = "A Python library for scoring observation probabilities from frequency counts, with multiple smoothing methods."
readme = "README.md"
license = "MIT"
keywords = ["nlp", "smoothing", "frequency", "probability", "language-model"]
authors = [
    {name = "Tiago Tresoldi", email = "tiago.tresoldi@lingfil.uu.se"},
]
maintainers = [
    {name = "Tiago Tresoldi", email = "tiago.tresoldi@lingfil.uu.se"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
# Memory profiling capabilities
memory = [
    "psutil>=5.8.0",
]
# Notebook and plotting for tutorials
notebook = [
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]
# All optional dependencies
all = [
    "freqprob[memory,notebook,validation]",
]
# Validation and testing dependencies
validation = [
    "hypothesis>=6.0.0",
    "nltk>=3.8",
    "scikit-learn>=1.0.0",
]
# Development dependencies
dev = [
    # Testing (required by Makefile)
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",

    # Code quality (required by Makefile)
    "ruff>=0.1.0",
    "mypy>=1.5.0",

    # Build and release (required by Makefile)
    "build>=0.10.0",
    "twine>=4.0.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "nhandu>=0.1.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",

    # Include validation dependencies
    "freqprob[validation]",
]

[project.urls]
Homepage = "https://github.com/tresoldi/freqprob"
Documentation = "https://github.com/tresoldi/freqprob/blob/main/docs/user_guide.md"
Repository = "https://github.com/tresoldi/freqprob.git"
Issues = "https://github.com/tresoldi/freqprob/issues"
Changelog = "https://github.com/tresoldi/freqprob/blob/main/CHANGELOG.md"

[tool.setuptools.dynamic]
version = {attr = "freqprob.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["freqprob*"]



# Ruff linting (replaces flake8, pycodestyle, pyflakes, etc.)
[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = [
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "RUF",   # Ruff-specific rules
    "D",     # pydocstyle
]

ignore = [
    "E501",   # Line too long (ruff format handles this)
    "B008",   # Do not perform function calls in argument defaults
    "T201",   # Allow print statements in benchmark scripts
    "RET504", # Unnecessary variable assignment before return
    "ARG002", # Unused method argument (common in abstract methods)
    "D202",   # No blank lines allowed after function docstring
    "D200",   # One-line docstring should fit on one line
    "D107",   # Missing docstring in __init__
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG001",  # Unused function arguments in tests
    "ARG002",  # Unused method arguments in tests
    "S101",    # Use of assert detected (pytest uses assert)
]
"docs/benchmarks.py" = [
    "T201",    # Allow print statements in benchmark script
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901",    # Complex function
]
"docs/*.ipynb" = [
    "E402",    # Module level import not at top of file (common in notebooks)
]

[tool.ruff.lint.isort]
known-first-party = ["freqprob"]
known-third-party = ["numpy", "scipy", "psutil", "pytest"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# MyPy type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Some third-party decorators are untyped
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "psutil.*",
    "matplotlib.*",
    "seaborn.*",
    "pytest.*",
    "nltk.*",
    "sklearn.*",
    "hypothesis.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = ["misc", "no-untyped-def", "method-assign"]

[[tool.mypy.overrides]]
module = ["tests.test_statistical_correctness", "tests.test_regression_reference", "tests.test_numerical_stability"]
disable_error_code = ["misc", "no-untyped-def", "method-assign"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=freqprob",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "memory: marks tests that check memory usage",
    "numerical: marks numerical stability tests",
    "statistical: marks statistical correctness tests",
    "regression: marks regression tests against reference implementations",
    "property: marks property-based tests with hypothesis",
    "validation: marks comprehensive validation tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["freqprob"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",  # Usually just imports
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "tests/htmlcov"

[tool.coverage.xml]
output = "coverage.xml"


# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601", "B403", "B301", "B404", "B603", "B110", "B311"]  # Skip assert_used, shell_injection_process_vulnerable, pickle usage, pickle loads, subprocess_import, subprocess_without_shell, try_except_pass, and random

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

